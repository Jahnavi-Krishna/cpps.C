(1)#include<stdio.h>
Why is # used?
#include is used to develop large programs
Preprocessor directives begin with # and only whitespace characters 
and comments may appear before a preprocessor directive on a line.
pg 523
     The # operator causes a
replacement text token to be converted to a string surrounded by quotes.
     macro definition:
#define HELLO(x) puts( "Hello, " #x );
When HELLO(John) appears in a program file, it’s expanded to
puts( "Hello, " "John" );
The string "John" replaces #x in the replacement text. Strings separated by white space are
concatenated during preprocessing, so the preceding statement is equivalent to
puts( "Hello, John" );
The # operator must be used in a macro with arguments because the operand of # refers
to an argument of the macro.
The ## operator concatenates two tokens. Consider the following macro definition:
#define TOKENCONCAT(x, y)
x ## y
When TOKENCONCAT appears in the program, its arguments are concatenated and used to
replace the macro
___function of #
pg42
#include Preprocessor Directive
#include <stdio.h> is a directive to the C preprocessor. Lines beginning with # are processed by the prepro-
cessor before compilation. Line 3 tells the preprocessor to include the contents of the standard input/output header ( <stdio.h> ) in the program. This header contains information
used by the compiler when compiling calls to standard input/output library functions such as printf.


(2)EXPERIMENT:# NOT WRITTEN
When # is not written   
E492: Not an editor command: qw! 
The compiler did not compile the code.
so,maybe the compiler starts compiling after reading #
pg42
#include <stdio.h>
is a directive to the C preprocessor. Lines beginning with # are processed by the prepro-
cessor before compilation. Line tells the preprocessor to include the contents of the stan-
dard input/output header ( <stdio.h> ) in the program. This header contains information used by the compiler when compiling calls to standard input/output library functions such
as printf .


(3)BLANK SPACES
Experiment:What if blank spaces are not used?
No difference in the output.
Maybe it didn't matter to the compiler.
pg42
Blank Lines and White Space
if Line is simply a blank line. You use blank lines, space characters and tab characters (i.e.,
“tabs”) to make programs easier to read. Together, these characters are known as white
space. White-space characters are normally ignored by the compiler.
    Additional information that blank spaces are used to make the code look simple .But blank spaces are ignored by the compiler.


(4)What is a preprocessor?
C has preprocessors...include,define etc are preprocessors
What is a Preprocessor Directive?
pg525
The preprocessor executes before a program is compiled.
• All preprocessor directives begin with # .
• Only whitespace characters and comments may appear before a preprocessor directive on a line.



(5)WHAT IS A TOKEN?
pg359
Function strtok is used to break a string into a series of tokens. A token is a
sequence of characters separated by delimiters (usually spaces or punctuation marks, but a
delimiter can be any character). For example, in a line of text, each word can be considered
a token, and the spaces and punctuation separating the words can be considered delimiters.
     Did not understand completely , but it might be a unit of the program.


(6)What is void?
int main( void ) is a part of every C program. The parentheses after main indicate that main is a program
building block called a function. C programs contain one or more functions, one of which
must be main . Every program in C begins executing at the function main . Functions can
return information. The keyword int to the left of main indicates that main “returns” an
integer (whole-number) value.
  Functions also can receive information when they’re called upon to execute. The void in parentheses here
means that main does not receive any information.
pg 42


(7)
add.c:2:16: error: expected ‘;’, ‘,’ or ‘)’ before ‘*’ token
 int input(int a*,int b*)
     It is (int *a,int *b);     the * symbol should be use dbefore the variale and not after the variable.


(8)add.c: In function ‘input’:
add.c:5:8: error: expected expression before ‘%’ token
  scanf(%d,a);
        ^
add.c:7:8: error: expected expression before ‘%’ token
  scanf(%d,b);
        ^
"%d" should be written and not %d alone.



(9)
#include <stdio.h>

void input(int *a,int *b)
{
    printf("enter a");
    scanf("%d",a);
    printf("enter b");
    scanf("%d",b);
}

int add(int a,int b)
{
    int c;
    c=a+b;
    return c;
}
void output(int a, int b, int c)
{
   printf("%d + %d is %d\n",a,b,c);
}
int main()
{
    int x,y,z;
    input(&x,&y);
    z=add(x,y);
    output(x,y,z);
}


     void main or void before a function_____-indicatesthat function does not return any value.
     int main(void) or int compute(void)_____-indicates that the function does not take any value.



(10)
add.c: In function ‘add’:
add.c:11:2: error: expected declaration specifiers before ‘c’
  c=a+b;
  ^
add.c:12:2: error: expected declaration specifiers before ‘return’
  return c;
  ^
add.c:13:1: error: expected declaration specifiers before ‘}’ token
 }
 ^
add.c:15:1: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘{’ token
 {
 ^
add.c:19:1: error: expected ‘=’, ‘,’, ‘;’, ‘asm’ or ‘__attribute__’ before ‘{’ token
 {
 ^
add.c:9:5: error: old-style parameter declarations in prototyped function definition
 int add(int a,int b)
     ^
add.c:24:1: error: expected ‘{’ at end of input
 }
 
 
 did not open a {.
 
 (11)
prg1.c: In function ‘main’:
prg1.c:5:8: warning: implicit declaration of function ‘input’ [-Wimplicit-function-declaration]
  int a=input();
        ^
prg1.c:6:8: warning: implicit declaration of function ‘compute’ [-Wimplicit-function-declaration]
  int b=compute(a);
        ^
prg1.c:7:2: warning: implicit declaration of function ‘output’ [-Wimplicit-function-declaration]
  output(a,b);
  ^
prg1.c: At top level:
prg1.c:21:6: warning: conflicting types for ‘output’
 void output(int a,int b)
      ^
prg1.c:7:2: note: previous implicit declaration of ‘output’ was here
  output(a,b);
  ^
prg1.c: In function ‘output’:
prg1.c:24:9: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]
  printf("%d + 1 is %d",&a,&b);
         ^
prg1.c:24:9: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘int *’ [-Wformat=]

I used wrote function first to check if it works.But some erroes occured.
but when I wrote main function in the end,it worked perfectly without any errors.
 
 


