#include<stdio.h>
void input(int *a,int *b)
{
        printf("Enter a\n");
        scanf("%d",a);
        printf("Enter b\n");
        scanf("%d",b);
}
int add(int a,int b)
{
        int c;
        c=a+b;
        return c;
}
 void output(int a,int b,int c)
{
        printf("%d + %d = %d",a,b,c);
}

int main()
{
        int x,y,z;
        input(&x,&y);
        z=add(x,y);
        output(x,y,z);
}



(1)Formal Parameter or Formal argument
 pg 568
 The formal type parameters are place-
holders for fundamental types or user-defined types. These placeholders are used to specify
the types of the function’s parameters (line 5), to specify the function’s return type and to
declare variables within the body of the function definition (line 7). A function template
is defined like any other function, but uses the formal type parameters as placeholders for
actual data types.
   Formal parameters are the arguments declared within a function.
      Arguments which are mentioned in the definition of the function is called formal arguments.
     Formal arguments are very similar to local variables inside the function. Just like local variables, 
 formal arguments are destroyed when the function ends.

 (2)Actual Parameter
 Arguments which are mentioned in the function call is known as the actual argument.
 Actual arguments can be constant, variables, expressions etc.
the actual value that is passed into the method by a caller
actual parameters are often called arguments.



 
 (3)Pass by Value
   When arguments are passed by value, a copy of the argument’s value
is made and passed to the called function. Changes to the copy do not affect an original
variable’s value in the caller.Pass-by-value should be used whenever the called function does not need to modify
the value of the caller’s original variable.
pg173

#include<stdio.h>
void input(int *a,int *b)
{
        printf("Enter a\n");
        scanf("%d",a);
        printf("Enter b\n");include<stdio.h>
void input(int *a,int *b)
{
        printf("Enter a\n");
        scanf("%d",a);
        printf("Enter b\n");
        scanf("%d",b);
}
int add(int a,int b)
{
        int c;
        c=a+b;
        return c;
}
 void output(int a,int b,int c)
{
        printf("%d + %d = %d",a,b,c);
}

int main()
{
        int x,y,z;
        input(&x,&y);
        z=add(x,y);
        output(x,y,z);
}

        scanf("%d",b);
}
int add(int a,int b)
{
        int c;
        c=a+b;
        return c;
}
 void output(int a,int b,int c)
{
        printf("%d + %d = %d",a,b,c);
}

int main()
{
        int x,y,z;
        input(&x,&y);
        z=add(x,y);
        output(x,y,z);
}


 (4)Pass by Reference
   When an argument is passed by reference, the caller allows the
called function to modify the original variable’s value.
pg173
 
 #include<stdio.h>
void input(int*a,int*b)
{
        printf("Enter a\n");
        scanf("%d",a);
        printf("Enter b\n");
        scanf("%d",b);
}
int add(int a,int b)
{
        int c;
        c=a+b;
        return c;
}
 void output(int a,int b,int c)
{
        printf("%d + %d = %d",a,b,c);
}

int main()
{
        int x,y,z;
        input(&x,&y);
        z=add(x,y);
        output(x,y,z);
}

(5)
2.c: In function ‘main’:
2.c:25:13: error: ‘x’ redeclared as different kind of symbol
         int x=input();
             ^

 ERROR: input(&x,&y); is to be written,


(6)2.c:27:13: error: ‘z’ redeclared as different kind of symbol
         int z=add(int x,int y);
             ^
2.c:23:26: note: previous definition of ‘z’ was here
 int main(int x,int y,int z)
                          ^
2.c:27:19: error: expected expression before ‘int’
         int z=add(int x,int y);
                   ^
2.c:27:15: error: too few arguments to function ‘add’
         int z=add(int x,int y);
               ^
2.c:12:5: note: declared here


the right code is z=add(x,y);and not int x and int y that has to be passed.

(7)2.c:23:14: note: previous definition of ‘x’ was here
 int main(int x,int y,int z)
              ^
  2.c:23:20: note: previous definition of ‘y’ was here
 int main(int x,int y,int z)
                    ^
  int main() is the correct code.Main does not take input values.Thus, int x,int y,int z should not be declared in the main.       
              
              
(8)2.c:26:13: error: ‘y’ redeclared as different kind of symbol
         int y=input();
             ^
     this y is should not be declared




(9)Local variable
It might be a variable declared in a block of code or a separate function and used only within that,
these variables can not be used outside the block.
pg 593
Variables declared in a function definition’s body are known as local variables and can be
used only from the line of their declaration in the function to closing right brace ( } ) of the
block in which they’re declared. A local variable must be declared before it can be used in
a function. A local variable cannot be accessed outside the function in which it’s declared.
When a function terminates, the values of its local variables are lost.


(10)GLobal variable
it might be a variable definrd in the main function and can be accessed anywhere within the program.
pg 183
Global variables are created by placing variable declarations outside any function
definition, and they retain their values throughout the execution of the program. Global
variables and functions can be referenced by any function that follows their declarations or definitions in the file.
pg563
The unary scope resolution operator cannot be used to access a local vari-
able of the same name in an outer block. A global variable can be accessed directly without
the unary scope resolution operator if the name of the global variable is not the same as
that of a local variable in scope

(11)What is %d?And how does it work? 
I think it is used to accept the input given by the user,i.e. to extract and obtain the value given by the user.
pg.47
The function reads from the standard input, which is usually the keyboard. This scanf has two arguments,
"%d" and &integer1 . The first, the format control string, indicates the type of data that
should be entered by the user. The %d conversion specifier indicates that the data should be
an integer (the letter d stands for “decimal integer”). The % in this context is treated by scanf
(and printf as we’ll see) as a special character that begins a conversion specifier.
