Day 4 [ Learning Episodes]{Sum of n numbers}
(1)What is an array?
Array names are simply pointers to where the arrays begin in memory, and, of course,
two arrays will always be at different memory locations.
When an array is passed to a general-purpose function designed to handle arrays of
any size, the size of the array must be passed as an additional argument. Furthermore, one
array cannot be assigned to another with the assignment operator(s)—array names are
const pointers, so they cannot be used on the left side of an assignment operator.

pg 217
An array is a group of contiguous memory locations that all have the same type. To refer to
a particular location or element in the array, we specify the array’s name and the position
number of the particular element in the array.

(2)How to declare an array?
Any one of the elements may be referred to by giving the array’s name followed by the position number of
the particular element in square brackets ( [] ). The first element in every array is the zeroth
element. An array name, like other variable names, can contain only letters, digits and
underscores and cannot begin with a digit.
pg.218
eg.All elements of this array
share the array name, c
Position number of the
element within array c
Fig. 6.1 | 12-element array.
c[ 0 ] -45
c[ 1 ] 6
c[ 2 ] 0
c[ 3 ] 72
c[ 4 ] 1543
c[ 5 ] -89
c[ 6 ] 0
c[ 7 ] 62
c[ 8 ] -3
c[ 9 ] 1
c[ 10 ] 6453
c[ 11 ]
The position number within square brackets is called a subscript. A subscript must be
an integer or an integer expression.


(3)What is a pointer?

Pointers are variables whose values are memory addresses. Normally, a variable directly con-
tains a specific value. A pointer, on the other hand, contains an address of a variable that
contains a specific value. In this sense, a variable name directly references a value, and a
pointer indirectly references a value (Fig. 7.1). Referencing a value through a pointer is
called indirection.

Declaring Pointers
Pointers, like all variables, must be defined before they can be used. The definition specifies that variable countPtr is of type int * (i.e., a pointer to an integer) and is read
(right to left), “ countPtr is a pointer to int ” or “ countPtr points to an object of type int .”
Also, the variable count is defined to be an int , not a pointer to an int . The * applies only to countPtr in the definition. 
When * is used in this manner in a definition, it indicates that the variable being defined is a pointer. 
Pointers can be defined to point to objects of any type. 
To prevent the ambiguity of declaring pointer and non-pointer variables in the same declaration as shown above,
you should always declare only one variable per declaration.

int *countPtr, count;

Note: Pointers and pointer-based entities such as arrays and strings, when misused intentionally or acciden-
tally, can lead to errors and security breaches. See our Secure C Programming Resource Center
( www.deitel.com/SecureC/ ) for articles, books, white papers and forums on this important topic.7.3 Pointer Operators
279
count
7
countPtr
count
7
The name count directly references
a variable that contains the value 7
The pointer countPtr indirectly
references a variable that
contains the value 7
