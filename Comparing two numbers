Day 3 (11 Learning Episodes here + 3 Learning Episodes in Smallest of 3 numbers)
#include<stdio.h>
int input(int*a,int*b)
{
        printf("Enter the first number\n");
        scanf("%d",a);
        printf("Enter thr second number\n");
        scanf("%d",b);
}
int compare(int m,int n)
{
        int p;
        if(m==n)
                p=00;

        else
        {
                if(m<n)
                        p=m;
                else
                        p=n;
        }
        return p;
}
void output(int q,int r,int s)
{
        if(s==00)
                printf("Both are equal");

        else
                printf("%d is smaller among %d and %d",s,r,q);

}
int main()
{
        int x,y,z;
        input(&x,&y);
        z=compare(x,y);
        output(x,y,z);
}



(1) WHat are the diffeerent ways to debug a logical error?

1.Comparing with a existing program which works
        problem:it is a strategy to learn a prg nd not programming
2. Is mental tracing a good stategy?
        problrm:if your understanding of particulara set of concepts may be incomplete,thus u might trace wrong.
3.putting printf where ever possible
        -v can find the control flow (whether it is going to if part or else part,like if it goes to the if part,printing "if part" etc)
        -values of the variables can be printed
        (thereis something called logging in large prgs to debug logical errors.)
4.Single stepping
        to debug,compile with the flag -g
  gcc -g prgname.c
  ->ddd =data display debugger.
ddd ./a.out



(2)
int input(int *a,int *b)
{
        printf("Enter a\n");
        scanf("%d",a);
        printf("Enter b\n");
        scanf("%d",b);
}
int compare(int m,int n)
{
        int p;
        if(m=n)
                p=00;
        else
        {
                if(m<n)
                        p=m;
                else if(n<m)
                        p=n;
        }
}
void output(int m,int n,int p)
{
        if(p=00)
                printf("Both are equal");
        else
                printf("%d is smaller among %d and %d",&p,&m,&n);
}
int main()
{
}
compare.c: In function ‘output’:
compare.c:27:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]
   printf("%d is greater among %d and %d",&p,&m,&n);
          ^
compare.c:27:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘int *’ [-Wformat=]
compare.c:27:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘int *’ [-Wformat=]
____used *a,*b,maybe thats wrong
The same error appeared 
___maybe I should ude if(p==00)
Same error again
declaration and the indentation was not right.




(3)compare.c: In function ‘output’:
compare.c:28:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]
   printf("%d is greater among %d and %d",&q,&r,&s);
          ^
compare.c:28:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘int *’ [-Wformat=]
compare.c:28:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘int *’ [-Wformat=]
compare.c: In function ‘main’:
compare.c:32:7: error: expected identifier or ‘(’ before ‘int’
 int x,int y,int z;
       ^
compare.c:33:11: error: ‘y’ undeclared (first use in this function)
 input(&x,&y);
           ^
compare.c:33:11: note: each undeclared identifier is reported only once for each function it appears in
compare.c:34:1: error: ‘z’ undeclared (first use in this function)
 z=compare(x,y);
 ^
___Declaration was not correct,and indentation of main function was wrong.





(4)What is a Right shift operator(>>)? 
I know it is not the same as > because '>' is greater than symbol used for comparing .
where as '>>' is something called right shift operator.
__I guess this operator shifts the value or memory location to the right position.
pg425
The right-shift operator ( >> ) shifts the bits of its left operand to the right by the number
of bits specified in its right operand. Performing a right shift on an unsigned int causes
the vacated bits at the left to be replaced by 0 s; 1 s shifted off the right are lost. In
Fig. 10.13, the result of right shifting number1 in the expression number1 >> 8 (line 21) is
3 ( 00000000 00000000 00000000 00000011 ).





(5)compare.c: In function ‘output’:
compare.c:29:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 2 has type ‘int *’ [-Wformat=]
   printf("%d is greater among %d and %d",&q,&r,&s);
          ^
compare.c:29:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 3 has type ‘int *’ [-Wformat=]
compare.c:29:10: warning: format ‘%d’ expects argument of type ‘int’, but argument 4 has type ‘int *’ [-Wformat=]

__syntax errors, variables were mismatched.

#include<stdio.h>
int input(int*a,int*b)
{
        printf("Enter the first number\n");
        scanf("%d",a);
        printf("Enter thr second number\n");
        scanf("%d",b);
}
int compare(int m,int n)
{
        int p;
        if(m==n)
                p=00;

        else
        {
                if(m>n)
                        p=m;

                else(n>m)
                        p=n;

        }
        return p;
}
void output(int q,int r,int s)
{
        if(s==00)
                printf("Both are equal");

        else
                printf("%d is greater among %d and %d",s,r,q);

}
int main()
{
        int x,y,z;
        input(&x,&y);
        z=compare(x,y);
        output(x,y,z);
}





(6)ERROR:
compare.c: In function ‘compare’:
compare.c:20:4: error: expected ‘;’ before ‘p’
    p=n;
    ^
    __used a condition for else,
    either else if should be used to have a condition or else should be used .
    
    correct codde::
    #include<stdio.h>
int input(int*a,int*b)
{
        printf("Enter the first number\n");
        scanf("%d",a);
        printf("Enter thr second number\n");
        scanf("%d",b);
}
int compare(int m,int n)
{
        int p;
        if(m==n)
                p=00;

        else
        {
                if(m>n)
                        p=m;
                else
                        p=n;
        }
        return p;
}
void output(int q,int r,int s)
{
        if(s==00)
                printf("Both are equal");

        else
                printf("%d is greater among %d and %d",s,r,q);

}
int main()
{
        int x,y,z;
        input(&x,&y);
        z=compare(x,y);
        output(x,y,z);
}




(7)What is a Left shift operator(<<)? 
I know it is not the same as < because '<' is lesser than symbol used for comparing .
where as '<<' is something called left shift operator.
__I guess this operator shifts the value or memory location towards the left position .
pg425
The left-shift operator ( << ) shifts the bits of its left operand to the left by the number
of bits specified in its right operand. Bits vacated to the right are replaced with 0 s; 1 s
shifted off the left are lost. In Fig. 10.13, variable number1 is assigned the value 960
( 00000000 00000000 00000011 11000000 ) in line 9. The result of left shifting variable
number1 8 bits in the expression number1 << 8 (line 15) is 49152 ( 00000000 00000011
11000000 00000000 ).




(8)What is the difference between '&' and '&&'??
        &=Bitwise AND assignment operator.
 __used to assign ,eg a&b
 
 int main()
{
        int x,y,z;
        input(&x,&y);
        z=compare(x,y);
        output(x,y,z);
}       
        
        &&=logical AND.
   if(m>n&&m>o)
                return m;
        else if(n>m&&n>o)
                return n;
        else
                return o;
      
        


(9)compare.c: In function ‘output’:
compare.c:22:52: error: ‘si’ undeclared (first use in this function)
  printf("%d is greater among %d , %d and %d",t,q,r,si);
  
  
  mistakenly typed "si",instead of s.
  typing error
  void output(int q,int r,int s)
{
        if(s==00)
                printf("Both are equal");

        else
                printf("%d is greater among %d and %d",s,r,q);

}

  
(10)What is Debugging?
        Debugging is the process of finding and rectifying the logical errors which have occured in the code. 
We resolve the syntax errors through compiling and other methods.
gcc -g and ddd debuggers are used to debug logical errors and rectify them.

Writing code is only the beginning of completing a programming project. After the original implementation is complete,
it is time to test the program. Unfortunately, only the rare (and usually non-priority) code project is completed without a 
single bug. Hence, debugging takes on great importance: the earlier you find an error, the less it will cost.
A major bug found before distribution is much, much cheaper to fix than a major bug found by thousands of your users.

A debugger allows you, the programmer, to interact and inspect the running program, making it possible to trace the flow of execution and track down the problems. Read on for tutorials on debuggers like GDB and Visual Studio,
as well as more exotic and powerful tools like Valgrind. 
__CProgramming.com
(11)How to Debug?
  process: first clear all syntaax errors and if there are logical errors ,then we use debugging to find the logical errors.
  
  Go to the terminal, enter gcc -g programname.c
  then,proceed if there are no syntax errors,
  now,enter ddd a.out
  
  nvidia@nvidia-OptiPlex-3050:~$ gcc -g 8.c
nvidia@nvidia-OptiPlex-3050:~$ ddd a.out

close the first window,
select the break point from where you want to check the logical errors.
now select Run button.snd execute the program.Now, the debugger displays the control flow,
and processing .Now we can debug the logical errors.

#include <stdio.h>
int input(int *a, int *b)
{
printf("Enter a number\n");
scanf("%d",a);
printf("Enter a number\n");
scanf("%d",b);
}
int compare(int a, int b)
{
int c;
if(a<b){
c=a;
}
else{
c=b;
}
return c;
}
void output(int a, int b, int c)
{
printf("%d is smaller among %d and %d",a,c,b);
}
int main()
{
int x,y,z;
input(&x,&y);
z=compare(x,y);
output(x,y,z);
}

(gdb) file /home/nvidia/a.out
Reading symbols from /home/nvidia/a.out...done.
(gdb) core /home/nvidia/.ddd/sessions/compare.c/dddcore
[New LWP 3576]
Core was generated by `/home/nvidia/a.out'.
Program terminated with signal SIGABRT, Aborted.
#0 output (a=56, b=90, c=56) at 5.c:22
(gdb) Quit
